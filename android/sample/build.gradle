apply plugin: GreetingPlugin
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion COMPILE_SDK
    buildToolsVersion BUILD_TOOLS

    defaultConfig {
        applicationId "com.dailystudio.devbricksx.devbricksxsample"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode VERSION_CODE
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    sourceSets {
//        debug {
//            java {
//                srcDir "${buildDir.absolutePath}/generated/source/kaptKotlin/debug"
//            }
//        }
//        release {
//            java {
//                srcDir "${buildDir.absolutePath}/generated/source/kaptKotlin/release"
//            }
//        }
//    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(":devbricksx")
    implementation project(':devbricksx-java-annotations')

    kapt project(':devbricksx-java-compiler')
    kapt "androidx.room:room-compiler:${project.ext.roomVersion}"
}

class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        Task task = project.task('preRunKapt', type: JavaCompile) {
            println 'running kapt first'
//            options.compilerArgs << '-proc:only' << '-processors com.foo.bar.MyAnnotationProcessor'
//
//            def targetSourceSet
//            def kotlinGenerated
//            project.android.sourceSets.all { sourceSet ->
//                def name = sourceSet.name
//
//                if (name == "debug") {
//                    kotlinGenerated = "build/generated/source/kaptKotlin/${name}/"
//                    targetSourceSet = sourceSet
//                }
//            }
//
//            source = targetSourceSet.java.srcDirs
//            destinationDir = project.android.sourceSets.java.output.classesDir
        }

        project.afterEvaluate {
            project.android.sourceSets.all { sourceSet ->
                def kotlinGenerated = "build/generated/source/kaptKotlin/${name}/"
//                println kotlinGenerated
                sourceSet.java.srcDir(kotlinGenerated)
            }

            project.android.applicationVariants.all { variant ->
                variant.javaCompiler.dependsOn(task)
            }
        }
    }


}
