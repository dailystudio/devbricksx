apply plugin: 'maven'

buildscript {
    ext.kotlin_version = '1.3.71'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

ext {
    if (file("private.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("private.properties")))
        BINTRAY_KEY = props.getProperty('BINTRAY_KEY')
        BINTRAY_USER = props.getProperty('BINTRAY_USER')
    } else {
        BINTRAY_KEY = ""
        BINTRAY_USER = ""
    }

    VERSION_NAME = version()
    VERSION_CODE = versionCode().toInteger()
    SITE_URL = 'https://github.com/dailystudio/devbricksx'
    GIT_URL = 'https://github.com/dailystudio/devbricksx.git'
    GROUP_NAME = 'com.github.dailystudio'
    COMPILE_SDK = 29
    BUILD_TOOLS = '29.0.3'
    IS_UPLOADING = project.getGradle().startParameter.taskNames.any{it.contains('bintrayUpload')}
}

subprojects {
    repositories {
        jcenter()
    }

    group = GROUP_NAME
    version = VERSION_NAME

    if (IS_UPLOADING && project.name in ['devbricksx']) {
        println "generating POM for project [$project.name]"

        gradle.taskGraph.whenReady { taskGraph ->
            def pomTask = taskGraph.getAllTasks().find {
                it.path == ":$project.name:generatePomFileForReleasePublication"
            }
            if (pomTask == null) return

            taskGraph.getAllTasks().find{it.path == ":$project.name:generatePomFileForReleasePublication"}.doLast {
                file("build/publications/maven/pom-default.xml").delete()
                pom {
                    //noinspection GroovyAssignabilityCheck
                    project {
                        name "$project.name"
                        artifactId "$project.name"
                        packaging project.name == 'compiler' ? 'jar' : 'aar'
                        description 'Development Bricks eXetrems'
                        url SITE_URL
                        version VERSION_NAME

                        scm {
                            url GIT_URL
                            connection GIT_URL
                            developerConnection GIT_URL
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                            }
                        }

                        developers {
                            developer {
                                id 'dailystudio'
                                name 'dailystudio'
                                email 'dailystudio2020@gmail.com'
                            }
                        }
                    }
                }.writeTo("build/publications/maven/pom-default.xml")
            }
        }
    }
}

def String version() {
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    return versionProps['major'] + "." + versionProps['minor'] + "." + versionProps['patch']
}

def String versionCode() {
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    return versionProps['code']
}
